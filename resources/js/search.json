[[{"l":"Welcome"}],[{"l":"Getting started","p":["Welcome to the @squide documentation. This page will give you an overview of @squide and a quick start to configure a new federated application from nothing."]},{"l":"Overview","p":["We built this shell to facilitate the adoption of federated applications at Workleap by enforcing patterns that we believe will help feature teams successfully implement a distributed architecture.","The shell itself is a very thin API layer on top of Webpack Module Federation and React Router with the goal of maximizing both libraries forces and staying as most as possible out of their ways."]},{"i":"why-webpack-module-federation","l":"Why Webpack Module Federation?","p":["We identified 2 major problems with frontend federated applications:","How to prevent loading the same large dependencies twice when switching between modules?","How to offer a cohesive experience that doesn't feels modular?","We believe Webpack Module Federation solves the first problem by offering a mecanism capable of deduping at runtime the common dependencies shared by the host application and the remote modules.","With this mecanism in place, all federated parts of an application can now be loaded in the same browsing context instead of nested browsing contexts (like iframes).","By sharing the same browsing context (e.g. the same Document, the same Window object, and the same DOM), federated parts are now unified and form a single application, which also solves the second issues."]},{"i":"why-react-router","l":"Why React Router?","p":["Well, what would you rather use? Joking aside, React Router version 6 nesting routing feature is ideal for federated application as it makes the UI heavily composable and decoupled."]},{"l":"Quick start"},{"l":"Install the packages","p":["Open a terminal at the root of the host application project and install the following packages:","Then open a terminal at the root of every remote module project and install the following packages:"]},{"l":"Configure the shell","p":["TBD"]},{"l":"Transient setup with local modules","p":["TBD"]}],[{"l":"Local modules only"}],[{"l":"Updating shared dependencies"}],[{"l":"Runtime","p":["A runtime instance gives modules access to functionalities such as routing and navigation."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object of options.","loggers: An optional array of Logger instances.","services: An optional string-keyed object literal of custom service instances.","sessionAccessor: An optional function returning the current session."]},{"l":"Usage","p":["Also have a look at useRuntime, useRoutes, useNavigationItems, useLogger, useService."]},{"l":"Create a Runtime instance"},{"l":"Register routes"},{"l":"Register navigation items"},{"l":"Use the logger"},{"l":"Use the event bus"},{"l":"Retrieve a service"},{"l":"Retrive the current session"}],[{"l":"RuntimeContext","p":["React context to share a Runtime instance between an host application and the application modules."]},{"l":"Reference"},{"l":"Parameters","p":["value: A Runtime instance."]},{"l":"Usage"},{"l":"Provide a Runtime instance"},{"l":"Retrieve a Runtime instance"}]]