[[{"l":"Welcome","p":["The federated application shell for Workleap apps"]}],[{"l":"Getting started","p":["Welcome to the @squide documentation. In this getting started section, you'll find an overview of the shell and a quick start guide to create a new federated application from scratch."]},{"l":"Overview","p":["We have built this shell to facilitate the adoption of federated applications at Workleap by enforcing patterns that we believe will help feature teams successfully implement a distributed architecture.","The shell itself is a lightweight API layer built on top of Webpack Module Federation and React Router, with the goal of maximizing the strength of both libraries while interfering as little as possible with their functionality."]},{"l":"Webpack Module Federation","p":["We have identified 2 major challenges with frontend federated applications:","How can we prevent loading the same large dependencies twice when switching between modules?","How can we offer a cohesive experience that doesn't feel modular?","To address the first challenge, we believe that Webpack Module Federation provides a solution by offering a mecanism capable of deduping common dependencies shared between the host application and the remote modules at runtime.","With this mecanism in place, all federated parts of an application can now be loaded in the same browsing context instead of nested browsing contexts such as iframes.","By sharing the same browsing context (e.g. the same Document, the same Window object, and the same DOM), federated parts now form a unified and cohesive single application, addressing the second challenge.","With Webpack Module Federation, we believe that we can develop federated applications that provide the same user experience as monolithic applications \uD83D\uDE80"]},{"l":"React Router","p":["React Router nested routes feature is ideal for federated applications as it enables highly composable and decoupled UI. Besides, what else would you use? \uD83D\uDE02"]},{"l":"Module registration","p":["The most distinctive aspect of this shell is the conventions it enforces for loading and registering remote modules. Here's a brief overview of the flow:","During bootstrap, the host application attempts to load predefined modules and calls a registration function with a specific name and signature for each successfully loaded module.","During registration, a module receives the shared services of the federation application and use them to dynamically register its routes and navigation items.","Once all the remote modules are registered, the host application will create a React Router instance with the registered routes and renders a navigation menu with the registered navigation items.","That's a nutshell overview. Of course, there is more to it, but these are the main ideas."]},{"l":"Guiding principles","p":["While developing the API of @squide, we kept a few guiding principles in mind. Those principles are not settled stones, you might want to diverge from them from time to time, but adhering to those will make your experience more enjoyable:","A module should always correspond to a subdomain of the application's business domain and should only export pages.","A module should be fully autonomous. It shouldn't have to coordinate with other parts of the application for things as trivial as navigation links.","A federated application should feel cohesive. Different parts of a federation application should have the ability to communicate with each others and react to changes happening outside of their boundaries.","Data and state should never be shared between parts of a federated application. Even if two parts require the same data or the same state values, they should load, store and manage them independently."]},{"l":"Limitations","p":["Webpack Module Federation comes with a few manageable limitations that are important to consider when architecting your distributed application:","A shared dependency cannot be tree-shaken. Since remote modules are loaded at runtime, ModuleFederationPlugin cannot infer which parts of a shared dependency will be used by the application modules. Therefore, tree-shaking is disabled for shared dependencies.","Webpack Module Federation does not support React's Fast Refresh. However, it does support Webpack Hot Module Replacement.","These limitations are not specific to @squide, they are specific to Webpack Module Federation."]}],[{"l":"Create an host application","p":["Let's begin by creating the application that will serve as the entry point for our federated application and host the application modules."]},{"l":"Install the packages","p":["Create a new project (we'll refer to ours as host), then open a terminal at the root of the newly created project and install the following packages:"]},{"l":"Setup the application","p":["First, create the following files:","Then, use a dynamic import to add an async boundary:","To learn more about this async boundary and the bootstrap.tsx file, read the following article.","Then, instanciate the shell Runtime and register the remote module(the configuration of the remote module will be covered in the next section):","Then, retrieve the routes that have been registered by the remote module and create a router instance:","Then, create a layout component to render the navigation items:"]},{"l":"Configure Webpack","p":["To include the Webpack ModuleFederationPlugin we'll use the hostTransformer function:","View a full webpack.config.js"]},{"i":"try-the-application","l":"Try the application \uD83D\uDE80","p":["Start the application, and you should see the home page. Even if the remote module application is not yet available, the host application will gracefully load."]}],[{"l":"Create a remote module","p":["Remote modules are modules that are not included in the host application build but are instead loaded at runtime from a remote server. They provide a way for teams to be fully autonomous by independently deploying their modules without relying on the other parts of the application.","Let's add our first remote module!"]},{"l":"Install the packages","p":["Create a new project (we'll refer to ours as remote-module), then open a terminal at the root of the newly created project and install the following packages:"]},{"l":"Setup the application","p":["First, create the following files:","Then, register the remote module routes and navigation items:"]},{"l":"Configure Webpack","p":["To add Webpack ModuleFederationPlugin we'll use the remoteTransformer function:","View a full webpack.config.js on Github"]},{"i":"try-the-application","l":"Try the application \uD83D\uDE80","p":["Start both applications, and you should notice an additional link in the navigation menu. Click on the link to navigate to the page of your new remote module!"]}],[{"l":"Create a local module","p":["Local modules are regular modules that are part of the host application build. They are independent modules that expose a registration function to the host application's bootstrapping code. A local module can be a standalone package, a sibling project (in a monorepo setup), or even a local folder within the host application.","Local modules are useful when migrating from a monolithic application to a distributed application or when launching a new product with an unrefined business domain.","Let's add a local module to demonstrate how it's done!","Loading remote modules at runtime with Webpack Module Federation is the primary focus of this shell and our recommended approach. It empowers teams to be fully autonomous by deploying their modules independently from the other parts of the application.","However, we recognize that teams working on mature products may prefer to gradually migrate to a distributed architecture by first extracting subdomains into independent modules within their current monolithic setup before fully committing to remote modules loaded at runtime.","To facilitate this transition, this shell also supports local modules that are loaded at build time.","Both remote and local modules can be used within same application as this shell supports dual bootstrapping. For example, an application can be configured to load a few remote modules at runtime while also loading a few local modules at build time."]},{"l":"Install the packages","p":["Create a new project (we'll refer to ours as local-module), then open a terminal at the root of the newly created project and install the following packages:"]},{"l":"Setup the application","p":["First, create the following files:","Then, add the following fields to the package.json files:","Then, register the local module routes and navigation items:"]},{"l":"Register the local module","p":["Go back to the host application and register the local module. Don't forget to add a dependency in the host application package.json file."]},{"i":"try-the-application","l":"Try the application \uD83D\uDE80","p":["Start both applications, and you should now notice a third link in the navigation menu. Click on the link to navigate to the page of your new local module!"]}],[{"l":"Learn the API","p":["Now that we've created a host application, loaded a few modules and registered routes and navigation items, let's delve into the APIs provided by this shell.","For a comprehensive list of the @squide API, refer to the References section."]},{"l":"Logging","p":["@squide includes a built-in logging feature that integrates with the Runtime class and the useLogger hook.","First, register your own custom logger by implementing the Logger interface or register @squide built-in ConsoleLogger:","Then, log entries from any parts of your federated application with the useLogger hook:","The logger is also available from the Runtime instance."]},{"l":"Messaging","p":["It's crucial that the parts of a federated application remains loosely coupled. To help with that, @squide offers a built-in Event Bus.","First, listen to an event with the useEventBusListener hook:","Then, dispatch an event from anywhere with the useEventBusDispatcher hook:","You can use the event bus to enable various communication scenarios, such as notifying components of state changes, broadcasting messages across modules, or triggering actions based on specific events.","The event bus is also available from the Runtime instance."]},{"l":"Session","p":["Most of our applications (if not all) will eventually require the user to authenticate. To facilitate this process, the @squide Runtime class accepts a sessionAccessor function. Once the shell registration flow is completed, the function will be made accessible to every module of the application.","First, let's define a sessionAccessor function:","Our security department reminds you to refrain from using a fake SessionManager in a production application \uD83D\uDE0A","Then register the accessor function:","Finally, access the session from any parts of the application with the useSession hook:","Or determine whether or not the user is authenticated with the useIsAuthenticated hook:","The session is also available from the Runtime instance."]},{"l":"Services","p":["While @squide provides a range of built-in functionalities, by no mean these alone can support the needs of every mature application. Therefore, the shell Runtime allows the addition of custom services.","First, make the service available to every part of the application by passing a service instance to the Runtime instance:","Then, access the service instance from anywhere with the useService hook:","The services are also available from the Runtime instance."]}],[{"l":"Deploy","p":["The deployment process for a federated application can vary depending on various factors, including the chosen hosting provider. Therefore, we do not recommend any specific deployment setup.","However, there are a few essential configurations that need to be made regardless of your deployment choices."]},{"l":"Default redirect","p":["To enable support for direct page hits, you need to add the following redirect rule to your host application's hosting provider:"]}],[{"l":"Guides","p":["Override the host layout","Isolate module failures","Add authentication","Implement a custom logger","Develop a module in isolation","Migrating from a monolithic application"]}],[{"l":"Override the host layout","p":["In many applications, multiple pages often share a common layout that includes elements such as a navigation bar, a user profile menu, and a main content section. In a React Router's application, this shared layout is commonly referred to as a RootLayout:","In the previous code sample, the RootLayout serves as the default layout for the home page as well as for every page (route) registered by a module.","For most pages, this is the behavior expected by the author. However, for pages such as a login page, the default RootLayout isn't suitable because the page is not bound to a user session (the user is not even authenticated yet).","To accomodate pages that require a different layout, a mechanism is needed to move their route declaration at the root of the React Router's router instance, before the RootLayout is declared.","Package managers supporting workspaces such as Yarn and NPM call this mechanism \"hoisting\", which means \"raise (something) by means of ropes and pulleys\". This is exactly what we are trying to achieve here.","@squide has a built-in useHoistedRoutes hook capable of raising module routes marked as hoist at the root of the routes array, before the RootLayout declaration. Thus, an hoisted page will not be wrapped by the RootLayout and will have full control over its rendering.","To hoist module pages, first transform the module routes with the useHoistedRoutes hook before creating the router instance:","Then, mark the pages as hoisted and optionally use a new layout:","For additional options, go to the useHoistedRoutes hook reference page"]}],[{"l":"Isolate module failures","p":["One of the key characteristics of micro-frontends implementations like iframes and subdomains is the ability to isolate failures within individual remote modules, preventing them from breaking the entire application.","However, in a Webpack Module Federation implementation, this is not the case as all the remote modules share the same browsing context (e.g. the same Document, the same Window object, and the same DOM). A failure in one remote module can potentially breaks the entire application.","Nevertheless, we can get very close to iframes failure isolation by utilizing React Router's Outlet component and the errorElement property of a React Router's routes:","In the previous code sample, a RootErrorBoundary is declared below the RootLayout but above the routes of the remote module. By doing so, if a module encounters an unhandled error, the nested error boundary will only replace the section rendered by the Outlet component within the RootLayout rather than the entire page.","By implementing this mechanism, the level of failure isolation achieved is comparable to that of an iframes or subdomains implementation.","With this mechanism, failure isolation is as good as with an iframes or subdomains implementation.","If your application is hoisting page, it's important to note that they will be rendered outside of the host application's root error boundary. To prevent breaking the entire application when an hoisted page encounters unhandled errors, it is highly recommended to declare a React Router's errorElement property for each hoisted page."]}],[{"l":"Add authentication","p":["Most of our applications (if not all) will eventually require the user to authenticate. To facilitate this process, the @squide Runtime class accepts a sessionAccessor function. Once the shell registration flow is completed, the function will be made accessible to every module of the application.","When combined with a React Router's authentication boundary and a login page, the shared sessionAccessor function is a great asset to manage authentication concerns.","First, let's define a sessionAccessor function:","Our security department reminds you to refrain from using a fake SessionManager in a production application \uD83D\uDE0A","Then create a Runtime instance with the new sessionAccessor function:","Then create an authentication boundary component using the useIsAuthenticated hook:","Internally, the useIsAuthenticated hook use the sessionAccessor function to determine whether or not the user is authenticated.","Then, add a login page:","And finally, assemble everything with React Router's nested routes:","Now, start the application and attempt navigating to the root page (/). You will be redirected to the /login page. Login with temp/ temp, you will be redirected to the root page."]}],[{"l":"Implement a custom logger","p":["Many applications must integrate with specific remote logging solutions such as Honeycomb and Azure Application Insights. To facilitate this integration, the shell runtime accepts any custom loggers implementing the Logger interface.","First, let's define a custom logger:","Then create a Runtime instance with an instance of the new CustomLogger:","Start the applications and open the developer tools, then, refresh the page. You should see the following console log message:"]}],[{"l":"Develop a module in isolation","p":["To develop their own independent module, a team shouldn't be required to install the host application or any other modules of the application they do not own. However, they should still have a means to integrate their module with the application shell ( RootLayout, RootErrorBoundary, etc..) while working on their module in isolation.","To achieve this, the first step is to extract the application shell from the host application. There are several approaches to accomplish this, but in this guide, we'll transform the host application into a monorepo and introduce a new local package named @sample/shell for this purpose:"]},{"l":"Shell package","p":["We won't show the implementation details of the RootLayout and RootErrorBoundary in this guide as it already has been covered many times by other guides.","First, let's add an appRouter hook to the shell package. Its purpose is to provide a reusable router configuration that can be utilized by both the host application and the isolated modules. By using this hook, modules developed in isolation can utilize the same application shell and routing configuration as the host application.","This guide only covers the RootLayout and RootErrorBoundary but the same goes for other shell assets such as an AuthenticationBoundary."]},{"l":"Host application","p":["Then, let's revisit the host application and incorporate the newly introduced useAppRouter hook:"]},{"l":"Remote module","p":["With our new setup in place, we can now configure the remote module to be developed in isolation. The goal is to start the module development server and render the module pages with the same layout and functionalities as if it was rendered by the host application.","To begin, let's add an index.tsx and App.tsx files to the remote module project:","The index.tsx file is similar to the bootstrap.tsx file of a host application but, tailored for an isolated module. The key distinction is that, since we set up the project for local development, we'll register the module with the registerLocalModules function instead of the registerRemoteModules function:","The App.tsx file uses the newly created useAppRouter hook to setup React Router:","Next, add a new dev-local script to the package.json file to start the local development server in \"isolation\":","The dev-local script is similar to the dev script but introduces a LOCAL environment variable. This new environment variable will be utilized by the webpack.config.js file to conditionally setup the development server for local development in isolation or to be consumed by a host application through the /remoteEntry.js entry point:","Start the local application by running the dev-local script. The federated application shell should wrap the content of the index route of the module."]},{"l":"Local module","p":["Similarly to remote modules, you can achieve the same isolated setup for local modules. The main difference is that the webpack.config.js file of a local module serves the sole purpose of starting a development server for isolated development. Typically, local modules do not rely on Webpack Module Federation."]}],[{"l":"Migrating from a monolithic application","p":["Transforming an existing monolithic application into a distributed architecture is often more challenging than building a new federated application from scratch.","However, it's also a bad idea to start a new application with a distributed architecture since teams typically lack sufficient understanding of the business domain at that stage. Therefore, for most applications, it makes sense to begin as monolithic application and transition to a distributed architecture later.","With the introduction of local modules, @squide offers an alternative approach that lies between prior solutions. Instead of immediately embracing Team Topology's stream-aligned teams and striving for full team autonomy across the board, local modules allow teams to start with a monorepo setup and add independent local packages (modules) for each expected value stream.","Since adding/deleting local packages in a monorepo setup is pretty cheap, teams can freely reorganize their value streams along the way and won't preemptively invest into a distributed CI/CD infrastructure as local modules are part of the host application build. With independent but local value streams, teams will be well-positioned to transition toward a federated application once they can justify the cost.","If your project is already a monolithic application with a polyrepo setup and you aim to migrate to a distributed architecture, we recommend a decoupling-first strategy using local modules and a monorepo setup."]},{"l":"Decoupling first","p":["The primary challenge to migrate to a distributed architecture is coupling. Thus, for most applications, starting by decoupling the monolith into composable value streams could be the right strategy. It's a great way to get into the migration without the immediate need to update the CI/CD infrastructure or preemptively change developers' habits.","We recommend the following steps:","1- Transform the codebase into a monorepo setup.","2- Create independent local packages (modules) for each identified value stream.","3- Refactor the monolithic application code into the corresponding value tream local packages and ensure that each value stream can be developed independently(e.g., without the need to start the entire application).","4- Import and register the local packages(modules) into the host application.","5- Finally, transition from local modules to remote modules and update your CI/CD pipelines to enable independent deployment of modules.","By following these steps, you can gradually decouple your monolithic application, create modular value streams, and prepare the foundation for a distributed architecture."]}],[{"l":"References"},{"l":"Artefacts","p":["Packages"]},{"l":"API"},{"l":"Runtime","p":["Runtime class","RuntimeContext","useRuntime","useRoutes","useNavigationItems","useLogger","useService","useServices","useSession"]},{"l":"Registration","p":["registerLocalModules","registerRemoteModules","registrationStatus","useAreRemotesReady"]},{"l":"Routing","p":["useHoistedRoutes","useRenderedNavigationItems"]},{"l":"Logging","p":["Logger","ConsoleLogger"]},{"l":"Messaging","p":["EventBus","useEventBusDispatcher","useEventBusListener"]},{"l":"Session","p":["useIsAuthenticated"]},{"l":"Webpack","p":["hostTransformer","remoteTransformer"]},{"l":"Fakes","p":["@squide offers a collection of fake implementations to facilitate the development of modules in isolation from the other parts of the application.","SessionManager"]}],[{"l":"Packages","p":["Name","NPM","@squide/core","npm version","@squide/react-router","@squide/webpack-module-federation","@squide/fakes"]}],[{"l":"Runtime class","p":["A runtime instance give modules access to functionalities such as routing, navigation and logging."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options.","loggers: An optional array of Logger instances.","services: An optional string-keyed object literal of custom service instances.","sessionAccessor: An optional function returning the current session."]},{"l":"Usage"},{"l":"Create a Runtime instance"},{"l":"Register routes","p":["A @squide route accept any properties of a React Router Route component with the addition of an hoist property."]},{"l":"Register an hoisted page","p":["Unlike a regular page, a hoisted page is added at the root of the router, outside of the boundaries of the host application's root layout. This means that a hoisted page has full control over its rendering.","Setup the host application to accept hoisted routes"]},{"l":"Register navigation items","p":["A @squide navigation item can either be a NavigationLink or a NavigationSection. Both types can be intertwined to create a multi-level menu hierarchy. A NavigationSection item is used to setup a new level while a NavigationLink define a link.","NavigationSection accept the following properties:","label: The section text.","children: The section content.","priority: An order priority affecting the position of the item in the menu (higher first)","addiltionalProps: Additional properties to be forwarded to the section renderer.","NavigationLink accept any properties of a React Router Link component with the addition of:","label: The link text.","additionalProps: Additional properties to be forwarded to the link renderer.","Setup the host application to render navigation items"]},{"l":"Register nested navigation items"},{"l":"Sort registered navigation items","p":["A priority property can be added to a navigation item to affect it's position in the menu. The sorting algorithm is as follow:","By default a navigation item have a priority of 0.","If no navigation item have a priority, the items are positioned according to their registration order.","If an item have a priority 0, the item will be positioned before any other items with a lower priority (or without an explicit priority value).","If an item have a priority 0, the item will be positioned after any other items with a higher priority (or without an explicit priority value)."]},{"l":"Use a React Element as navigation item label"},{"l":"Style a navigation item"},{"l":"Open a navigation link in a new tab"},{"l":"Render additional props on a navigation item"},{"l":"Use the logger"},{"l":"Use the event bus"},{"l":"Retrieve a service"},{"l":"Retrieve the current session"}],[{"l":"RuntimeContext","p":["React context to share a Runtime instance between an host application and the modules."]},{"l":"Reference"},{"l":"Parameters","p":["value: A Runtime instance."]},{"l":"Usage"},{"l":"Provide a Runtime instance"},{"l":"Retrieve a Runtime instance"}],[{"l":"useRuntime","p":["Retrive a shared Runtime instance.","When possible, prefer useRoutes, useNavigationItems, useLogger, useServices, useService to useRuntime."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["A Runtime instance."]},{"l":"Usage"}],[{"l":"useRoutes","p":["Retrieve the registered routes from the Runtime instance provided by RuntimeContext."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["An array of Route."]},{"l":"Usage"}],[{"l":"useNavigationItems","p":["Retrieve the registered navigation items from the Runtime instance provided by RuntimeContext."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["An array of NavigationItem."]},{"l":"Usage"}],[{"l":"useLogger","p":["Retrieve a RuntimeLogger instance from the Runtime instance provided by RuntimeContext."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["A RuntimeLogger instance."]},{"l":"Usage"}],[{"l":"useService","p":["Retrieve a custom service from the Runtime instance provided by RuntimeContext."]},{"l":"Reference"},{"l":"Parameters","p":["name: A custom service instance name."]},{"l":"Returns","p":["A service instance or undefined if the specified service name doesn't match any registered instance."]},{"l":"Usage"}],[{"l":"useServices","p":["Retrieve a string-keyed object literal of custom service instances from the Runtime instance provided by RuntimeContext."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["A string-keyed object literal of custom service instances."]},{"l":"Usage"}],[{"l":"useSession","p":["Retrieve the current session from the Runtime instance provided by RuntimeContext."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["A custom session object."]},{"l":"Usage"}],[{"l":"registerLocalModules","p":["Register one or many local module(s). During the registration process, the specified registration function will be invoked with a Runtime instance and an optional context object.","A local module is a regular module that is part of the host application build and is bundled at build time, as opposed to remote module which is loaded at runtime from a remote server. Local modules are particularly valuable when undergoing a migration from a monolithic application to a federated application or when launching a new product with an evolving business domain."]},{"l":"Reference"},{"l":"Parameters","p":["registerFunctions: An array of ModuleRegisterFunction.","runtime: A Runtime instance.","options: An optional object literal of options.","context: An optional context object that will be pass to the registration function."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"}],[{"l":"registerRemoteModules","p":["Register one or many remote module(s). During the registration process, the module register function will be invoked with a Runtime instance and an optional context object.","A remote module is a module that is not part of the current build but is loaded at runtime from a remote server."]},{"l":"Reference"},{"l":"Parameters","p":["remotes: An array of RemoteDefinition(view the Remote definition section).","runtime: A Runtime instance.","options: An optional object literal of options.","context: An optional context object that will be pass to the registration function."]},{"l":"Returns","p":["A Promise object with an array of [RegistrationError] if any happens during the registration."]},{"l":"Usage"},{"l":"Remote definition","p":["To ease the configuration of remote modules, make sure that you first import the RemoteDefinition type and assign it to your remote definitions array declaration."]},{"l":"Name","p":["The name property of a remote definition must match the name property defined in the remote module ModuleFederationPlugin configuration.","If you are using @squide remoteTransformer function to add the ModuleFederationPlugin to the remote module Webpack configuration object, the remote module name is the second argument of the remoteTransformer function.","In the following exemple, the remote module name is remote1.","View the remoteTransformer function"]},{"l":"Url","p":["The url property of a remote definition must match the publicPath of the remote module Webpack configuration object.","In the following exemple, the remote module publicPath is http://localhost:8081."]}],[{"l":"registrationStatus","p":["Variable indicating whether or not the remote modules registration process is completed."]},{"l":"Usage"}],[{"l":"useAreRemotesReady","p":["Force the application to re-render once all the remote modules are registered. Without this hook, the page is rendered with an empty router as it happens before the remote modules registered their routes and navigation items.","Only use this hook if your application loads remote modules."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options.","interval: The interval in milliseconds at which the hook is validating if the registration process is completed."]},{"l":"Returns","p":["A boolean indicating if the registration is completed."]},{"l":"Usage"}],[{"l":"useHoistedRoutes","p":["Allow modules to register pages outside of the host application's elements boundary. Unlike a regular page, an hoisted page is added at the root of the router, meaning before the host application root layout, root error boundary and even root authentication boundary. Thus, an hoisted page has full control over its rendering.","By declaring a page as hoisted, other parts of the application will not be isolated anymore from this page's failures as the page will be rendered outside of the host application's root error boundary. To avoid breaking the entire application when an hoisted page encounters unhandled errors, it is highly recommended to declare a React Router's errorElement property for each hoisted page."]},{"l":"Reference"},{"l":"Parameters","p":["routes: An array of Route to process.","wrapManagedRoutes: A function nesting the managed routes under React elements such as a layout, an error boundary or an authentication boundary.","options: An optional object literal of options.","allowedPaths: An optional array of exclusive route paths available for hosting."]},{"l":"Returns","p":["An array of Route."]},{"l":"Usage"},{"l":"Hoist a module page"},{"l":"Register a module page with a different layout","p":["For a detailed walkthrough, read the guide on how to override the host layout."]},{"l":"Register a public page"},{"l":"Allowing an exclusive set of routes to be hoisted"}],[{"l":"useRenderedNavigationItems","p":["Recursively parse a navigation items structure to transform the items into React Elements.","The useNavigationItems hook returns the navigation items tree structure as is, meaning the consumer has to recursively parse the structure to transform the items into actual React Elements.","As it's a non-trivial process, the shell provides this utility hook to help with that."]},{"l":"Reference"},{"l":"Parameters","p":["navigationItems: An array of NavigationItem to render.","renderItem: A function to render a single link from a navigation item","renderSection: A function to render a section from a collection of items."]},{"l":"Returns","p":["An array of ReactElement."]},{"l":"Usage"}],[{"l":"ConsoleLogger","p":["A basic console logger."]},{"l":"Reference"},{"l":"Parameters","p":["logLevel: An optional minimum level for the logger to output a log entry to the console (default is LogLevel.critical)."]},{"l":"Usage"}],[{"l":"Logger","p":["A basic logger interface."]},{"l":"Usage"}],[{"l":"EventBus","p":["A basic implementation of a pub/sub mecanism enabling loosely coupled between the host application and the modules."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options.","logger: An optional logger to facilitate debugging."]},{"l":"Usage"},{"l":"Create an EventBus instance"},{"l":"Add a listener","p":["When possible, prefer useEventBusListener to eventBus.addListener."]},{"l":"Remove a listener"},{"l":"Dispatch an event","p":["When possible, prefer useEventBusDispatcher to eventBus.dispatch."]}],[{"l":"useEventBusDispatcher","p":["Retrieve an EventBus instance from the Runtime instance provided by RuntimeContext and provide a function to dispatch an event."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["A dispatch function."]},{"l":"Usage"}],[{"l":"useEventBusListener"},{"l":"Reference"},{"l":"Parameters","p":["eventName: The name of the event to listen for.","callback: A function to be executed when a event matching the provided name is dispatched.","options: An optional object literal of options.","once: Whether or not the event listener should be automatically removed once an event as been handled."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"}],[{"l":"useIsAuthenticated","p":["Indicate whether or not the user is authenticated.","If the sessionAccessor function return a non null/ undefined value, a user is considered as authenticated."]},{"l":"Reference"},{"l":"Parameters","p":["None"]},{"l":"Returns","p":["A boolean value."]},{"l":"Usage"}],[{"l":"hostTransformer","p":["Add to an existing Webpack configuration object a ModuleFederationPlugin plugin instance pre-configured for a @squide host application."]},{"l":"Reference"},{"l":"Parameters","p":["config: A Webpack configuration object.","name: The host application name.","options: An optional object literal of options.","router: An optional router identifier (default is react-router).","pluginOptions: An optional object literal of ModuleFederationPlugin options."]},{"l":"Returns","p":["A Webpack configuration object enriched with a ModuleFederationPlugin plugin instance."]},{"l":"Default shared dependencies","p":["The hostTransformer function will add the following shared dependencies as singleton by default:","react","react-dom","react-router-dom","@squide/core","@squide/react-router","@squide/webpack-module-federation","For the full shared dependencies configuration, have a look at the configTransformer.ts file on Github."]},{"l":"Usage"},{"l":"Transform a Webpack config"},{"l":"Specify additional shared dependencies","p":["Additional shared dependencies must be configured on the host application as well as every remote module."]},{"l":"Override a default shared dependency"}],[{"l":"remoteTransformer","p":["Add to an existing Webpack configuration object a ModuleFederationPlugin plugin instance pre-configured for a @squide remote module application."]},{"l":"Reference"},{"l":"Parameters","p":["config: A Webpack configuration object.","name: The remote application name.","options: An optional object literal of options.","router: An optional router identifier (default is react-router).","pluginOptions: An optional object literal of ModuleFederationPlugin options."]},{"l":"Returns","p":["A Webpack configuration object enriched with a ModuleFederationPlugin plugin instance."]},{"l":"Conventions","p":["To fulfil @squide remote module requirements, the remoteTransformer function will pre-configure the ModuleFederationPlugin with the following filename and exposes properties.","If the remote module publicPath is http://localhost:8081, the remote module bundle is available at http://localhost:8081/remoteEntry.js."]},{"l":"Default shared dependencies","p":["The remoteTransformer function will add the following shared dependencies as singleton by default:","react","react-dom","react-router-dom","@squide/core","@squide/react-router","@squide/webpack-module-federation","For the detailed configuration of the shared dependencies, have a look at the configTransformer.ts file on Github."]},{"l":"Usage"},{"l":"Transform a Webpack config"},{"l":"Specify additional shared dependencies","p":["Additional shared dependencies must be configured on the host application as well as every remote module."]},{"l":"Override a default shared dependency"},{"l":"Expose an additional module"}],[{"l":"SessionManager","p":["A local session manager strictly for development purpose."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options.","key: An optional key identifying the session in localStorage."]},{"l":"Usage"},{"l":"Create a SessionManager instance"},{"l":"Set a session"},{"l":"Get the current session"},{"l":"Clear the current session"},{"l":"Integrate with a Runtime instance"}],[{"l":"Samples"},{"i":"squide-sandbox","l":"@squide sandbox","p":["Host application","Remote module","Local module","Live sample"]}],[{"l":"About","p":["To ask a question or propose an idea, feel free to start a new discussion on Github. If you found a bug, please open an issue on Github."]},{"l":"Contributing","p":["Have a look at the contributor's documentation."]},{"l":"License","p":["See the @squide LICENSE on Github."]}]]